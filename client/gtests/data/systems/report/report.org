#+TITLE: EON GPR Test Systems
#+SUBTITLE: Under the Auspices of REAXPRO
#+AUTHOR: Alejandro, Hannes, Rohit, Satish, Maxim
#+OPTIONS: toc:nil
# I need the footnotes to be inlined
#+STARTUP: fninline
#+EXCLUDE_TAGS: noexport

#+BEGIN_SRC emacs-lisp :exports none :eval always
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+END_SRC

#+RESULTS:

* Configuration :ignoreheading:ignore:
:PROPERTIES:
:VISIBILITY: folded
:END:
** LaTeX :ignoreheading:ignore:
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: [12pt,a4paper]
# Suppress section numbers
#+OPTIONS: num:nil
*** Preamble :ignoreheading:ignore:
# Load first
#+LATEX_HEADER: \usepackage{amssymb,amsmath,MnSymbol}
#+LATEX_HEADER: \usepackage{unicode-math}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: % \usepackage{mathspec} Either this or mathtools
#+LATEX_HEADER: \defaultfontfeatures{Mapping=tex-text}
#+LATEX_HEADER: \setromanfont[Ligatures={Common}, Numbers={OldStyle}, ItalicFont={Crimson-Italic}, BoldFont={Crimson-Bold}]{Crimson} % If Hoefler is missing replace with Crimson
#+LATEX_HEADER: \setsansfont[Scale=0.8]{Roboto} % Used to be Helvetica Neue LT Com -> Nimbus Sans
#+LATEX_HEADER: \setmonofont[Scale=0.8]{Fira Mono} % Used to be MesloLGSDZ Nerd Font
#+LATEX_HEADER: \newfontfamily\scfont[Scale=1.2]{Crimson} % Used to be Minion Pro
# References
#+LATEX_HEADER: \usepackage[natbib]{biblatex}
#+LATEX_HEADER: \bibliography{/home/haozeke/GDrive/zotLib.bib}
# Check-boxes
#+LATEX_HEADER: \setbox0=\hbox{\large$\square$}
#+BIND: org-export-latex-list-parameters (:cbon "[{\parbox[][][c]{\wd0}{\large$\boxtimes$}}]" :cboff "[{\parbox[][][c]{\wd0}{\large$\square$}}]")
# Nicer Fonts
#+LATEX_HEADER: \usepackage{xunicode}
#+LATEX_HEADER: \usepackage{xltxtra}
#+LATEX_HEADER: \usepackage[protrusion=true,final]{microtype}
# Wider Text
# #+LATEX_HEADER: \usepackage[textwidth=7in,textheight=9in]{geometry}
# Better Heading (from this [[https://github.com/tatlicioglu/SoP/blob/master/SoP.tex][minimal template]])
#+LATEX_HEADER: \newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
#+LATEX_HEADER: \newcommand{\Hrule}{\rule{\linewidth}{0.3mm}}
#+LATEX_HEADER: \makeatletter% since there's an at-sign (@) in the command name
#+LATEX_HEADER: \renewcommand{\@maketitle}{%
#+LATEX_HEADER:   \parindent=0pt% don't indent paragraphs in the title block
#+LATEX_HEADER:   \centering
#+LATEX_HEADER:   {\Large \bfseries\scfont\textsc{\@title}}
#+LATEX_HEADER:   \HRule\par%
#+LATEX_HEADER:   \textit{\@author \hfill \@date}
#+LATEX_HEADER:   \par
#+LATEX_HEADER: }
#+LATEX_HEADER: \makeatother% resets the meaning of the at-sign (@)
# Suppress the abstract heading
#+LATEX_HEADER: \renewcommand{\abstractname}{\vspace{-\baselineskip}}
* Abstract :ignoreheading:ignore:
#+begin_abstract
\noindent Brief system descriptions of test cases considered. Also includes developer ~TODO~ items.
#+end_abstract
* Begin :ignoreheading:ignore:
\vspace{0.7em}
\noindent Many of the systems studied here are taken from textcite:koistinenMinimumModeSaddle2020 and the data has been kindly provided by Villi. Before describing the data-sets used, as well as the results; we will give a brief overview of the coupling of ~eon~ to the ~GPR Dimer~ library. The results of textcite:koistinenAlgorithmsFindingSaddle2019 established a baseline for studying the effects of accelerating saddle search methods namely:
- Nudged elastic band calculation cite:koistinenNudgedElasticBand2017,koistinenNudgedElasticBand2019
- Tailored bespoke covariance functions for atomic data cite:koistinenNudgedElasticBand2019,koistinenMinimumModeSaddle2020
- Proof of concept studies of accelerating surface walking methods like the dimer cite:asgeirssonExploringPotentialEnergy2018 using Gaussian Process Regression cite:koistinenMinimumModeSaddle2020
However, these proof of concept studies were implemented in MATLAB and were not amenable to large systems due to both theoretical restrictions and computational inefficiency.
* Architecture
The structure of the interface is given below:

#+DOWNLOADED: screenshot @ 2021-02-26 16:18:25
#+caption: EON to GPR Dimer interface
[[file:images/Architecture/2021-02-26_16-18-25_screenshot.png]]

** Programming Methodology
The GPR dimer is implemented as a stand-alone library (Apache2 licensed) with minimally invasive
changes to the EON code. This allowed for the use of modern and performance
oriented programming practices like:
- Modern build system
  - Allows for cross-platform optimizations
  - Integrates with MKL for improved HPC performance
- Extensive Testing with the ~googletest~ framework
  - Both unit tests and integration tests are provided
  - ~eon~ does not include a unit testing framework
    - An extensive set of manual test cases are provided to replicate all existing literature results
- Modular design following OOP practices
  - Separation of GPR hyperparameter optimizations
    - Allows for updating both the minimizer, and the possibility of implementing monte-carlo methods for hyperparameter optimization
  - Separation of GPR surface and the LBFGS call
    - This allows for the usage of other minimizers like the Lanczos
  - Separation of covariance functions
    - A standard interface for the implementation of future covariance functions has been provided
- Only user determined parameters are used internally
We use the numerical linear algebra library, Eigen; which supports Intel MKL
optimizations. Eigen is also used by EON.

The library itself has a self contained executable for testing which consumes the same input data as the MATLB code. The interface is seamless, with the addition of input parameters done through the standard ~eon~ configuration file.

The structure of the library is such that it accepts a general potential function from EON and then uses it to calculate the GPR approximation to the potential energy surface. For the relaxation phase, the GPR potential in EON is called which uses the trained GPR model.
*** EON Changes
A Cmake build system was implemented for efficient cross-platform builds. We augment the potentials with an interface to AMS. A GPR potential was also written, which is called by the library for the relaxation phase. Additionally, the build system allows for HPC speed-ups which are determined automatically and uses the MKL.
*** User Inputs
All the configurations follow the standard ~ini~ file specification of EON. As the ~gprdimer~ is implemented as a Minimum Mode Search method; as a replacement for the existing ~lanczos~ or ~dimer~ methods. Consider the standard configuration for a saddle search run:
#+begin_src ini
[Main]
job = saddle_search
temperature = 300
random_seed = 706253457

[Potential]
potential = morse_pt

[Optimizer]
converged_force = 0.001
max_iterations = 1000

[Saddle Search]
displace_least_coordinated_weight = 1.0
displace_radius = 3.3
displace_magnitude = 0.01
min_mode_method = dimer
max_energy = 10.0
#+end_src
**** AMS Interface
#+begin_src ini
[AMS]
engine = ADF
xc = B3LYP
#+end_src
The current implementation uses an I/O pipe and supports any of the engines exposed by AMS; however efforts to use the standard ~json~ pipe to AMS are ongoing. 
**** GPR Dimer
The interface through EON augments the existing ~conf.ini~ file with the following GPR specific parameters.
#+begin_src ini
[GPR Dimer]
finite_angle = 0.05
converged_angle = 0.0873
relaxation_converged_angle = 0.01
max_initial_rotation_iterations = 6
max_relaxation_rotation_iterations = 10
divisor_t_dimer = 10
max_outer_iterations =  300
max_inner_iterations = 1000
max_midpoint_displacement = 0.5
rotation_opt_method = "lbfgs"
translation_opt_method = "lbfgs"
inner_opt = "dimer"
active_radius = 10.0
dimer_separation = 0.01
convex_region_step_size = 0.1
max_step_size = 0.1
force_threshold = 0.001
ratio_at_limit = 0.666666666667
nogp_initial_rotations = true
has_many_iterations = true
hyperparameter_opt_method = "scg"
gpr_variance = 1e-7
gpr_noise_variance = 1e-5
prior_mean = 0.0
prior_variance = 1.0
prior_degrees_of_freedom = 20
# OPT parameters
opt_max_iterations = 400
opt_tol_sol = 0.001
opt_lambda_limit = 1e16
opt_lambda_init = 100
gpr_jitter_variance = 0
# OPT parameters
opt_max_iterations = 400
opt_tol_sol = 0.001
opt_lambda_limit = 1e16
opt_lambda_init = 100
gpr_jitter_variance = 0
#+end_src
Additionally, we have implemented debugging levels in the code for ease of visualization; which are able to generate snapshots of the GPR surface after each call to the true energy and forces (by exhaustively calculating energies over a user defined grid of points around moving atoms).
* TODO Toy Systems
These include standard benchmarks for the minimum mode saddle search problems in general.
** Platinum
Chronologically the first system tested here. The system has some pleasant qualities which make it easy to work and test:
- Easy control of the degrees of freedom
  - Achieved by varying the number of moving atoms and the fixed atoms
- Homogeneity meant neither atomic numbers nor atomic masses were required
- Cheap throwaway potential (Morse)

In particular, we present results on several systems of varying size.
*** One Platinum AdaAtom on a Pt Surface
* TODO Literature Reproductions
** Oxadiazole from N2O and Ethylene
Described in cite:koistinenMinimumModeSaddle2020.
** Allyl Vinly Ether Rearrangement
Also in cite:koistinenMinimumModeSaddle2020.

#+DOWNLOADED: screenshot @ 2021-02-26 04:07:40
[[file:images/Allyl_Vinly_Ether_Rearrangement/2021-02-26_04-07-40_screenshot.png]]

* References

\printbibliography[heading=none]

# Local Variables:
# before-save-hook: org-babel-execute-buffer
# after-save-hook: haozeke/org-save-and-export-latex
# End:
