============
Communicator
============

Eon has a server client architecture for running its calculations. The
simulation data is stored on the server and clients are sent jobs and return
the results. Each time eon is run it first checks to see if any results have
come back from clients and processes them accordingly and then submits more
searches if needed. In eon there are several different ways to run jobs. One
can run them locally on the server, using a job queuing system such as SGE_,
using a distributed computing system such as BOINC_, or grid computing
middleware such as ARC_.

.. _SGE:   http://wikis.sun.com/display/sungridengine/Home
.. _BOINC: http://boinc.berkeley.edu/
.. _ARC:   http://www.nordugrid.org/arc/


General
=======

``type``


    Default: local
    
    Options: 

        **local**:

        cluster:

        boinc:

        arc:


``job_bundle_size``

    Default: 1

    Short lived jobs can adversely affect performance in some situations. For
    example, when using empirical potentials to do saddle searches a single search
    might only take several seconds on modern CPUs. In order to improve performance
    more than one client job (*e.g.*, process search, dimer, minimization) can be
    run at the same time.

``search_buffer_size``

    Default: 1

    The number of searches that should be kept running. The current number of
    searches is the current number of running jobs times the ``job_bundle_size``.
    Every time eon is run it will check to see how many searches running and submit
    more if the number is less than ``search_buffer_size``.

Local
=====

The local communicator runs ``number_of_cpus`` bundles each time eon is run and
waits for them to finish before eon will exit.

``client_path``

    Default: eonclient

    Either the name or path to the eon client binary. If only a name and not a path
    is given then eon looks for the binary in same directory as config.ini failing to
    find it there it will search though the directories in the $PATH environment
    variable.

``number_of_cpus`` 

    Default: 1

    The number of jobs that will run simultaneously.

Cluster
=======

The cluster communicator works by calling a set of three user provided scripts to
talk to the job scheduler. An example of these scripts for SGE 6.2 is provided
in ``tools/clusters/sge6.2``. They will most likely need to be modified to run
on your system.

``script_path``
    Default: ./
    The path to the user defined scripts for submitting jobs to the communicator.
    
``name_prefix``

    Default: eon

    When jobs are submitted to the scheduler they are given a unique internally
    used named. In order to make the jobs identifiable by the user the
    ``name_prefix`` can be set to a meaningful string that will always be prepended
    to the job names.
    
``queued_jobs``

    Default: queued_jobs.sh

    This is the name of the script that returns the job ids of all the running and
    queued jobs. It does not have to return the job ids of only eon related jobs.

``submit_job``

    Default: submit_job.sh

    This is the name of the script that submits a single job to the queuing system.
    It takes two command line arguments. The first is the name of the job. This is
    not required for eon use, but is highly recommended so that users can identify
    which job is which. The second argument is the working directory. This is the
    path where the eon client should be executed. All of the needed client files
    will be placed in this directory. The script must return the job id of the
    submitted job. This is how eon internally keeps track of jobs.
    
``cancel_job`` 

    Default: cancel_job.sh

    This is the name of the script that cancels a job. It takes a single argument
    the job id.

Boinc
=====

The BOINC communicator allows eon to submit workunits to a BOINC project. 

``boinc_project_dir`` 

    Default: *None*

    This is the full path to the root of the BOINC project directory.

``boinc_wu_template_path``

    Default: *None*

    This is the path, relative from the ``boinc_project_dir``, to the boinc
    workunit template.

``boinc_re_template_path``
    
    Default: *None*

    This is the path, relative from the ``boinc_project_dir``, to the boinc
    result template.

``boinc_appname``

    Default: eonclient

    This is the name of the application in BOINC.

``boinc_results_path``

    Default: %(boinc_project_dir)s/sample_results

    This is the path where BOINC puts the final results. If you are using
    the sample_assimilator the results are stored in the project directory
    in a folder named "sample_results".

Arc
===

Todo

Examples
========

These examples only submit a single search as the ``search_buffer_size`` defaults to 1.

Local
-----

An example communicator section using the local communicator with an eon client
binary named "eonclient-custom" that either exists in the ``$PATH`` or in the
same directory as config.ini and uses makes use of 8 CPUs.

.. code-block:: ini

    [Communicator]
    type = local
    client_path = eonclient-custom
    number_of_cpus = 8

Cluster
-------

An example communicator section for the cluster communicator using the provided
sge6.2 scripts and a name prefix of "al_diffusion\_":

.. code-block:: ini

    [Communicator]
    type=cluster
    name_prefix=al_diffusion_
    script_path=/home/user/eon/tools/clusters/sge6.2

