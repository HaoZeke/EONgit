Communicator
------------

Options that apply to all of the different communicator types.

    **boinc_project_dir**: This is the full path to the root of the BOINC project directory.

        type: string

        default: ``./``

    **boinc_priority**: The priority of the BOINC workunits that will be submitted.

        type: int

        default: ``1``

    **client_path**: Either the name or path to the eon client binary. If only a name and not a path is given then eon looks for the binary in same directory as config.ini failing to find it there it will search though the directories in the $PATH environment variable.

        type: string

        default: ``eonclient``

    **number_of_CPUs**: The number of jobs that will run simultaneously.

        type: int

        default: ``1``

    **blacklist**: 

        type: string

        default: ``None``

    **queued_jobs**: This is the name of the script that returns the job ids of all the running and queued jobs. It does not have to return the job ids of only eon related jobs.

        type: string

        default: ``queued_jobs.sh``

    **boinc_re_template_path**: This is the path, relative from the boinc_project_dir, to the boinc result template.

        type: string

        default: ``None``

    **boinc_results_path**: This is the path where BOINC puts the final results. If you are using the sample_assimilator the results are stored in the project directory in a folder named sample_results.

        type: string

        default: ``%(boinc_project_dir)s/sample_results``

    **boinc_wu_template_path**: This is the path, relative from the boinc_project_dir, to the boinc workunit template.

        type: string

        default: ``None``

    **jobs_per_bundle**: In eon a job is defined as task that the eon client executes, such as a process search or a parallel replica run. Sometimes it makes sense to run more than one of the same type of job at a time.

        type: int

        default: ``1``

    **cancel_job**: This is the name of the script that cancels a job. It takes a single argument the job id.

        type: string

        default: ``cancel_job.sh``

    **boinc_appname**: This is the name of the application in BOINC.

        type: string

        default: ``eonclient``

    **script_path**: The path to the user defined scripts for submitting jobs to the communicator.

        type: string

        default: ``./``

    **name_prefix**: When jobs are submitted to the scheduler they are given a unique internally used named. In order to make the jobs identifiable by the user the name_prefix can be set to a meaningful string that will always be prepended to the job names.

        type: string

        default: ``eon``

    **type**: 

        type: string

        default: ``local``

        options:

            ``cluster``: A job scheduler can be used to run jobs through user supplied shell scripts. Examples are given for SGE.

            ``arc``: Jobs can be submitted to the grid computing software ARC.

            ``local``: The local communicator runs the calculations on the same computer that the server is run on.

            ``boinc``: Jobs can be submitted to a BOINC project.

            ``mpi``: The server and client can be run together as a single large MPMD MPI job.

    **submit_job**: This is the name of the script that submits a single job to the queuing system. It takes two command line arguments. The first is the name of the job. This is not required for eon use, but is highly recommended so that users can identify which job is which. The second argument is the working directory. This is the path where the eon client should be executed. All of the needed client files will be placed in this directory. The script must return the job id of the submitted job. This is how eon internally keeps track of jobs.

        type: string

        default: ``submit_job.sh``

    **num_jobs**: Local( The number of jobs that will be run every time the program is invoked) Cluster( The desired sum of the queued and running jobs.) Boinc( The number of jobs to keep in the queue.

        type: int

        default: ``1``

