
.. _parallel_replica:

================================
Parallel Replica
================================

Parallel Replica Dynamics (PRD) is the simplest and the most accurate way to do
accelerated-MD simulation. The only assumption made in this method is that the
reactions satisfy first order kinetics. 

.. math::

     \mathrm{Pr}(t) = k \exp (-k t)

PRD boosts the simulation linearly with the number of replicas and can be
easily combined with other methods for extending the MD time scale, e.g.
Hyperdynamics method, giving a multiplicative effect in the time scale. 

In Voter's approach,  N replicas of the system are made at first and then the
momentum in each replica is randomized and dephasing stage is employed to
decorrelate their motions. The simulation clock starts after this dephasing
stage and stops when the first transition is detected in any of replicas.
Because those N trajectories are independent, they can explore the phase space
N times faster than using a single trajectory. The overall simulation clock is
advanced by the sum of all the simulation times in replicas. 

In order to work with distributed computing, we have modified the traditional
scheme for running PRD. The replica generating and dephasing stage is exactly
the same.  However, we make all replicas run the same number of MD steps to
avoid biasing the successful transition trajectories. In other words, results
will only be reported back when the clients finish their full trajectories. The
server increments the simulation time :math:`t` until the first transition
occurs.

In order to run Parallel Replica, set **job** to *parallel_replica* in the
**[Main]** section. For regular MD all the parameters can be set in the
**[Dynamics]** section. Our parallel replica can also be combined with
Hyperdynamics by using Bond-Boost method. You can use this feature by setting
**bias_potential** to *bond_boost* in the **[Hyperdynamics]** section.

The temperature for the dynamics run is set in the **[Main]** section.

For detailed information about Parallel Replica and Bond-Boost, please refer to
papers by:

::

   "Parallel replica method for dynamics of infrequent events‚Äù
                                       A. F. Voter, Phys. Rev. B 57, 13985 (1998)

   "Accelerated molecular-dynamics of rare events with the bond-boost method"
               R. A. Miron and K. A. Fichthorn, J. Chem. Phys. 119, 6210 (2003)

These are options that go in the **[Parallel Replica]** section of the config.ini file.

**auto_stop**: Whether or not stop the job when a new state is found. For boinc communicator this value should be set to false.

    default: ``False``

**dephase_steps**: Number of steps used to decorrelate the replica trajectories. The momenta will be inversed when reaching the dividing surface to prevent transitions occurring during this period.

    default: ``200``

**check_period**: How frequently the state of system is checked. Every check_period steps, the current structure and the initial one will be compared to tell whether a newstate has been reached. Also note when you set refine as true, the code will keep a buffer array consisting of check_period/record_resolution+1 atomic configurations, which may increase the usage of memory.

    default: ``500``

**refine_transition_time**: Whether or not the transition time is refined. When this option is turned on, the code will keep an array consisted by check_period/record_resolution+1 atomic configurations. A Binary search algorithm is employed to determine the transition step. Otherwise the transition step would be the first in which a new state was found. This function reduces the need for a smaller check_period. And the accuracy of transition time is record_resolution*timestep.

    default: ``True``

**record_resolution**: How often the system is recorded to the buffer array when the refine_transition_time option is activated. Increasing the value of record_resolution lowers the accuracy of the transition time estimate but also reduces memory usage and speeds up refinement of the transition step.

    default: ``1``

**post_transition_steps**: Number of MD steps which will be performed after a new state has been found. A state check will be employed after these post_transition_steps to confirm that the state is stable. This additional check helps avoid meta-stable states. A value similar to dephase_steps is recommended.

    default: ``500``

