================================
Adaptive kinetic Monte Carlo
================================

The adaptive kinetic Monte Carlo (aKMC) method is a method to course grain
molecular dynamics for rare event systems.  A rare event system is one in which
the interesting dynamics is governed by short transitions between stable states.
The fast vibrational motion within a stable state is considered to be in equilibrium
and described statisitcally.  A transition between states is assumed to be first
order, since it is a rare events, and the rate of the transition is calculated from
the harmonic approximation to transition state theory (hTST).

The hTST approximation of a transition rate is calculated from the energy difference
between the saddle point along the minimum energy path for the transition and the
initial minimum.  The vibrational modes at these points are also used to calculate
the prefactor.  An hTST rate is of the standard Arrhenius form

Rate = nu Exp(-dE/kT)

where nu is the product of all positive modes at the minimum divided by those at the
saddle, dE is the energy barrier, and kT is the thermal enregy.

In order to propogate the dynamics within aKMC, a list of all possible rates leading
away from the current stable state to any other state is required.  Formally, there
are an enourmously large number of such transitions (also called processes) available in a
typical atomic system, but in fact only the transitions with the fastest rates with
the highest probability of happening are required.  The search for processes is then
limited to those with rates on the same order as the fastest processes found.

The search for possible processes is the primary task of the aKMC simulations.  Each
client does a minimum mode (minmode) following search from the miminum of the current
state and tries to find a saddle point which connects from the minimum in the current
state to an adjacent state.  A saddle point is connected to a state if a minimization
initiated along the negative mode at the saddle converges to the minimum of that state.

Each client is tasked with one or more such searches.  It climbs from the minimum to a
saddle, and if successful, it minimizes on either side of the saddle to determine the
connecting states.  The prefactor for the transition is also calculated by finite
difference and the hTST rate is calculated.  These data are reported back to the server.

The server is reponsible for the time evolution of the system by the KMC algorithm.  Each
process leading to a new state is tabulated in a rate table and one transition is selected
stochastically with a probability proportional to its rate.  The transition time is drawn
from a first-order distribution for the total rate of escape from the state.

The following describes options for running an aKMC simulation, including both KMC options
on the server-side and minmode following saddle point searching options on the client-side.
Each option is specified in the config.ini file under the section name given.  Default
values for each option is given along with a brief description.

\[aKMC\]
--------------------------------

Parameters for the aKMC algorithm on the server side.

**temperature** [300]
    The temperature, in kelvins, of the simulation.

**max_kmc_steps** [100000]
    The maximum number of transitions per execution of the server.

**thermally_accessible_window** [20]
    Processes with barriers within this number of kT above the lowest barrier
    will be used in the rate table.

**maximum_thermally_accessible_window** [2]
    Processes with barriers between the smallest barrier and this multiplied by
    thermally_accessible_window will be stored, in the event that they are
    thermally accessible later. Processes with barriers beyond this
    will be discarded.

**confidence** [0.99]
    The confidence criterion for moving to the next state.


\[Default\] (name needs changing, perhaps move some variables to job-specific sections)
--------------------------------

General client-side options.

**reactant_state_tag** [0]
    ??



\[Displacement\]
--------------------------------

A saddle search is initiated by making a local displacement of atoms from their
position at the minimum of the current state.  This displacement can be done
using the different strategies indicated by the **type** option, and the following
parameters.  If the user knows something about the local environment where reactions
are likely to take place in the system, this informationcan be used to make saddle searches
more efficient by getting them started in the right part of configuration space.

**type** [random]
    Epicenter selection criterion. Options are: *random*, *leastcoordinated*,
    and *undercoordinated*. The *random* option will select an atom at random
    from the free atoms in the configuration. The *leastcoordinated* option
    will determine the lowest coordination number of all atoms in the
    configuration and select one atom at random with that coordination number.
    The *undercoordinated* option will select a random atom with coordination
    less than *maximum_coordination*.

**radius** [5.0]
    Atoms within this distance of the epicenter will be displaced. (angstroms)

**size** [0.01]
    The standard deviation of the magnitude of the displacement. (angstroms)

**cutoff** [3.3]
    Atoms within this distance of each other are considered neighbors.

**use_covalent** [False]
    Use the covalent radii of atoms to determine neighbors.

**covalent_scale** [1.3]
    Multiply covalent radii by this amount before determining neighbors.

**brute_neighbors** [False]
    Determine neighbors by brute force (use this with nonorthogonal boxes).

**maximum_coordination** [11]
    When using undercoordinated as the epicenter type, choose only atoms with
    a coordination equal to or less than this.

**stdev_translation** [0.2]
    ???

**stdev_rotation** [1.0]
    ???

**molecule_list** [???]
    ???

**disp_at_random** [1 (boolean?)]
    ??? (boolean?)

Also client side, listed with a separate section


\[ProcessSearch\]

**minimize_first** [0]
    GH: should be boolean and moved


\[Saddle_Point\]

**displacement_type** [none]
    | not_fcc_or_hcp
    | min_coordinated
    | not_last_atom

**refine** [false]
    ?? why would we not refine, for hessian or minimization?

**converged** [0.025]
    | force for which a saddle is considered converged
    | GH: should combine with server and/or general options

**max_jump_attempt** [0]
    | some scheme to keep trying until you reach a convex region
    | GH: move to displacement section? remove?

**min_mode_method** [dimer]
    | dimer
    | lanczos
    | method to find the minimum mode

**max_step_size** [0.2]
    maxmimum amount that a configuration should move in a saddle search

**max_energy** [20.0]
    energy at wich a saddle search is considered bad and terminated

**norm_perturbation** [0.1]
    GH: displacement distance? move to displacement / combine with server? 

**within_radius_perturbated** [4.0]
    GH: combine with server and must change the name

**max_single_perturbation** [0.1]
    GH: combine with server parameter

**max_iterations** [1000]
    maximum number of iterations for a saddle point search

**perp_force_ratio** [0.0]
    mix in some of the perpendicular force in convex regions


\[Default\]

**neighbor_cutoff** [3.3]
    radius around epicenter atoms for which neighbor atoms are displaced


\[Dimer\]

Options for controlling the dimer minimum mode finding method on the client side.

**separation** [0.0001]
    Separation between dimer images.

**finite_diff_angle** [0.005]
    Finite difference angle over which the dimer is rotated to find the lowest curvature.

**rotations_high** [8]
    Maximum number of rotations allowed for the dimer in each step.

**rotations_low** [1]
    Minimum number of rotations allowed for the dimer in each step.

**window_high** [1.0]
    High rotational force above which the dimer rotates up to rotations_high times.
    GH: this will go away with Kastner's rotation scheme

**window_low** [0.1]
    Low rotational force above which the dimer rotates only once and below which is does not rotate.
    GH: this will go away with Kastner's rotation scheme

\[Hessian\]

Options for controlling how Hessian matricies are calculated.

**hessian_type** [reactant]
    | reactant
    | saddle
    | product
    | Which structure is used to calculate the Hessian from

**max_size** [0]
    ?? perhaps zero means any size

**min_displacement** [0.25]
    ??

**within_radius** [0.5]
    Atoms within this radius of moving atoms are included in the Hessian

**prefactor_min** [10e8]
    Minimum value for a resonable prefactor

**prefactor_max** [10e20]
    Maximum value for a resonable prefactor



\[Paths\]
--------------------------------

Location of files related to the sending and receiving aKMC data on the server.

**main_directory** [./]
    The root of the simulation directory. Configuration files
    and the initial reactant are here.

**searches_out** [main_directory/searches/out/]
    ???

**searches_in** [main_directory/searches/in/]
    ???

**states** [main_directory/states/]
    Where all of the information about individual states is located.

**results** [main_directory/]
    ???

**scratch** [main_directory/searches/scratch/]
    ???

**potential_files** [main_directory/potfiles]
    For extra files needed by the client for the potential.


\[Debug\]
--------------------------------

Parameters that are generally used to help debug calculations.

**keep_bad_saddles** [False]
    Keep data about bad saddles. What is bad, what is kept, and where is it
    kept?)

**keep_all_result_files** [False]
    Stores all result files in main_directory/results

**random_seed** [random]
    The random seed. "random" for a random random seed.

**register_extra_results** [False]
    Register processes found for a state after leaving that state.

**list_search_results** [True]
    ???

**use_mean_time** [False]
    Select transition times from the mean of the exponential distribution of escape times.

**target_trajectory** [False]
    Follow the state-to-state trajectory of another akmc simulation.


Default config.ini
--------------------------------
.. literalinclude:: ../default_config.ini


